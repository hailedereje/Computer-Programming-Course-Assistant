// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider  = "postgresql"
//   url  	    = env("DATABASE_URL")
//   directUrl = env("DIRECT_URL")
// }

datasource db {
  provider  = "mysql"
  url  	    = env("DATABASE_URL_LOCAL")
}

enum UserRole {
  ADMIN
  USER
  INSTRUCTOR
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  courses       UserOnCourse[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VarficationToken{
  id String @id @default(cuid())
  email String 
  token String @unique
  expiresAt DateTime
  @@unique([email,token])
}

model PasswordResetToken{
  id String @id @default(cuid())
  email String 
  token String @unique
  expiresAt DateTime
  @@unique([email,token])
}

model Course {
  id String @id @default(cuid())
  userId String?
  title String? @db.Text
  description String? @db.Text
  users UserOnCourse[]
  imageUrl String? @db.Text
  isPublished Boolean? @default(false)
  catagoryId String? @unique
  catagory Catagory? @relation(fields: [catagoryId],references: [id],onDelete: Cascade)

  chapter Chapter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([catagoryId])
}

model UserOnCourse{
  userId String 
  user User @relation(fields: [userId],references: [id])
  courseId String
  course Course  @relation(fields: [courseId],references: [id])
  @@id([userId,courseId])
}

model Catagory {
  id String @id @default(cuid())
  name String?
  courses Course[]
}

model Chapter {
  id String @id @default(cuid())
  number Int?
  name String?
  headings Heading[]
  courseId String? @unique
  course Course? @relation(fields: [courseId],references: [id],onDelete: Cascade)

}

model Heading {
  id String @id @default(cuid())
  number Int?
  name String?
  chapterId String? @unique
  chapter Chapter? @relation(fields: [chapterId],references: [id],onDelete: Cascade)
  subHeading SubHeading[]
}

model SubHeading {
  id        String    @id @default(cuid())
  number    Int?
  name      String?
  headingId String? @unique
  heading   Heading?  @relation(fields: [headingId], references: [id], onDelete: Cascade)
  content   Content[]
}

model Content {
  id           String     @id @default(cuid())
  name         String?
  contentId    String? @unique
  subHeading   SubHeading? @relation(fields: [contentId], references: [id])
}
